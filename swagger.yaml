swagger: "2.0"
info:
  description: "This is a sample server server to control family budget."
  version: "1.0.0"
  title: "Family Budget"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "budget"
  description: "Everything about your budget"
  externalDocs:
    description: "Find out more"
    url: "http://swaggerio"
- name: "PersonalAccount"
  description: ""
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /personalAccount:
   post:
      tags:
      - "PersonalAccount"
      summary: "Create a new PersonalAccount"
      description: ""
      operationId: "addPersonalAccount"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "PersonalAccount"
        required: true
        schema:
          $ref: "#/definitions/PersonalAccount"
      
      responses:
        "200":
          description: "Success"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
   put:
      tags:
      - "PersonalAccount"
      summary: "Update an existing PersonalAccount"
      description: ""
      operationId: "updatePersonalAccount"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "PersonalAccount"
        required: true
        schema:
          $ref: "#/definitions/Budget"
       
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "PersonalAccount not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /personalAccount/{personalAccountId}:
    get:
      tags:
      - "PersonalAccount"
      summary: "Find personalAccountId by ID"
      description: "Returns a single personalAccountId"
      operationId: "getpersonalAccountIdById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personalAccountId"
        in: "path"
        description: "ID of personalAccountId to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PersonalAccount"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "budjet not found"
      security:
      - api_key: []
   
    delete:
      tags:
      - "PersonalAccount"
      summary: "Deletes a personalAccountId"
      description: ""
      operationId: "deletepersonalAccountId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "personalAccountId"
        in: "path"
        description: "personalAccountId to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "PersonalAccountId not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      
  
  /budget:
    post:
      tags:
      - "budget"
      summary: "Create a new budjet"
      description: ""
      operationId: "addbudjet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Budget"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "budget"
      summary: "Update an existing budjet"
      description: ""
      operationId: "updateBudjet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Budget"
       
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
 
  /budget/{budgetId}:
    get:
      tags:
      - "budget"
      summary: "Find budjet by ID"
      description: "Returns a single budjet"
      operationId: "getBudjetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "budgetId"
        in: "path"
        description: "ID of budjet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Budget"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "budjet not found"
      security:
      - api_key: []
   
    delete:
      tags:
      - "budget"
      summary: "Deletes a budjet"
      description: ""
      operationId: "deleteBudjet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "budgetId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
 PersonalAccount:
    type: "object"
    properties:
      PersonalAccountid:
        type: "integer"
        format: "int64"
      familyMemberId:
        type: "integer"
        format: "int64"
      amount:
       type: "integer"
       format: "int64"
     
   
    xml:
      name: "PersonalAccount"
 Operations:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      familyMemberId:
        type: "integer"
        format: "int64"
      amount:
       type: "integer"
       format: "int64"
      direction:
        type: "boolean"
      budgetId:
        type: "integer"
        format: "int64"
      PersonalAccountID:
        type: "integer"
        format: "int64"
    xml:
      name: "User"      
 User:
    type: "object"
    properties:
      familyMemberId:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
 Budget:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      budgetId:
        type: "integer"
        format: "int64"
      money:
        type: "integer"
        format: "int64"
      familyMemberId:
        type: "array"
        
        items:
          type: "integer"
        example: 0, 1, 2
    xml:
      name: "Budget"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"